<?php
/**
 * MageINIC
 * Copyright (C) 2023 MageINIC <support@mageinic.com>
 *
 * NOTICE OF LICENSE
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see https://opensource.org/licenses/gpl-3.0.html.
 *
 * Do not edit or add to this file if you wish to upgrade this extension to newer
 * version in the future.
 *
 * @category MageINIC
 * @package Hyva_MageINICSpeakSearch
 * @copyright Copyright (c) 2023 MageINIC (https://www.mageinic.com/)
 * @license https://opensource.org/licenses/gpl-3.0.html GNU General Public License,version 3 (GPL-3.0)
 * @author MageINIC <support@mageinic.com>
 */

declare(strict_types=1);

use Magento\Framework\Escaper;
use Magento\Framework\View\Element\Template;
use Magento\Search\Helper\Data as SearchHelper;
use Hyva\Theme\Model\ViewModelRegistry;
use MageINIC\SpeakSearch\ViewModel\Data;

// phpcs:disable Magento2.Templates.ThisInTemplate.FoundThis
// phpcs:disable Magento2.Templates.ThisInTemplate.FoundHelper

/** @var Escaper $escaper */
/** @var Template $block */
/** @var SearchHelper $helper */
/** @var ViewModelRegistry $viewModels */

$helper = $this->helper(SearchHelper::class);
$viewModel = $viewModels->require(Data::Class);
$enable = $viewModel->getEnable();
$btnImgUrl = $viewModel->getButtonImgUrl() ? $viewModel->getButtonImgUrl() : '';
$speakImage = $viewModel->getImage();
?>
<script>
    'use strict';

    function initMiniSearch() {
        return {
            minSearchLength: <?= (int)$helper->getMinQueryLength() ?>,
            suggestions: [],
            suggest() {
                const search = this.$refs.searchInput;
                if (search.value.length >= this.minSearchLength) {
                    search.setCustomValidity('');
                    search.reportValidity();
                    this.fetchSuggestions(search.value);
                } else {
                    this.suggestions = [];
                }
            },
            fetchSuggestions(term) {
                fetch(
                    window.BASE_URL + 'search/ajax/suggest?' + new URLSearchParams({q: term}),
                    {
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    }
                )
                    .then(response => response.json())
                    .then(result => this.suggestions = result);
            },
            search(term) {
                const search = this.$refs.searchInput;
                term = term || search.value;
                if (term.length < this.minSearchLength) {
                    search.setCustomValidity('<?= $escaper->escapeJs(
                        __('Minimum Search query length is %1', $helper->getMinQueryLength())
                    ) ?>');
                    search.reportValidity();
                } else {
                    search.setCustomValidity('');
                    search.value = term;
                    this.$refs.form.submit();
                }
            },
            focusElement(element) {
                if (element && element.nodeName === "DIV") {
                    element.focus();
                    return true;
                } else {
                    return false;
                }
            },
            speak() {
                const $voiceSearchTrigger = document.getElementById("voice-search-trigger");
                const $miniSearchForm = document.getElementById("search_mini_form");
                const $searchInput = document.getElementById("search");
                let recognition;
                let recognizing = false;
                window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;

                function parseTranscript(e) {
                    return Array.from(e.results)
                        .map(result => result[0])
                        .map(result => result.transcript)
                        .join('');
                }

                function transcriptHandler(e) {
                    $searchInput.value = parseTranscript(e);
                    if (e.results[0].isFinal) {
                        $miniSearchForm.submit();
                    }
                }

                if (window.SpeechRecognition) {
                    $voiceSearchTrigger.style.display = 'block';
                    recognition = new window.SpeechRecognition();
                    recognition.interimResults = true;
                    recognition.addEventListener('result', transcriptHandler);
                } else {
                    $searchInput.classList.add('speak');
                }

                function startListening(e) {
                    $searchInput.setAttribute("placeholder", 'Listening...');
                    if (recognizing) {
                        recognition.stop();
                        recognizing = false;
                        return;
                    }
                    recognition.start();
                    recognizing = true;
                }

                $voiceSearchTrigger.addEventListener('click', startListening);
                $voiceSearchTrigger.addEventListener('touch', startListening);
            }
        }
    }
</script>
<div class="container py-2 mx-auto text-black" x-data="initMiniSearch()">
    <form class="form minisearch" id="search_mini_form" x-ref="form" @submit.prevent="search()"
          action="<?= $escaper->escapeUrl($helper->getResultUrl()) ?>" method="get" role="search">
        <label class="hidden" for="search" data-role="minisearch-label">
            <span><?= $escaper->escapeHtml(__('Search')) ?></span>
        </label>
        <div class="block block-content relative">
            <?php $class = $enable ? 'mageinic-voice-search' : '' ?>
            <div class="control absolute left-[3px] top-[7px]">
                <?php if ($enable): ?>
                    <?php if (!empty($btnImgUrl)): ?>
                        <a>
                            <img src="<?= /* @noEscape */
                            $btnImgUrl ?>" class="speak-icon"
                                 id="voice-search-trigger"
                                 alt="<?= $escaper->escapeHtml(__('Voice Search')) ?>"
                                 width="30px" height="30px"
                                 @click="speak()"
                            />
                        </a>
                    <?php else: ?>
                        <img src="<?= /* @noEscape */
                        $speakImage; ?>" class="speak-icon"
                             id="voice-search-trigger"
                             alt="<?= $escaper->escapeHtml(__('Voice Search')) ?>"
                             width="30px" height="30px"
                             @click="speak()"

                        />
                    <?php endif; ?>
                <?php endif; ?>
            </div>
            <input id="search"
                   x-ref="searchInput"
                   type="search"
                   autocomplete="off"
                   name="<?= $escaper->escapeHtmlAttr($helper->getQueryParamName()) ?>"
                   value="<?= /** @noEscape */
                   $helper->getEscapedQueryText() ?>"
                   placeholder="<?= $escaper->escapeHtmlAttr(__('Search entire store here...')) ?>"
                   maxlength="<?= $escaper->escapeHtmlAttr($helper->getMaxQueryLength()) ?>"
                   :class="{'px-10': <?= $enable ? 'true' : 'false' ?>}"
                   class="w-full px-10 py-2 text-lg leading-normal transition appearance-none text-grey-800
                focus:outline-none focus:border-transparent lg:text-xl"
                   @focus.once="suggest"
                   @input.debounce.300="suggest"
                   @keydown.arrow-down.prevent="focusElement($root.querySelector('[tabindex]'))"
                   @search-open.window.debounce.10="
                    $el.focus()
                    $el.select()
               "
            />
        </div>

        <template x-if="suggestions.length > 0">
            <div class="w-full leading-normal transition appearance-none text-grey-800 flex flex-col mt-1">
                <template x-for="suggestion in suggestions">
                    <div class="flex justify-between p-2 bg-container-lighter even:bg-container mb-1 cursor-pointer
                                 border border-container hover:bg-container-darker"
                         tabindex="0"
                         @click="search(suggestion.title)"
                         @keydown.enter="search(suggestion.title)"
                         @keydown.arrow-up.prevent="
                              focusElement($event.target.previousElementSibling) || $refs.searchInput.focus()
                          "
                         @keydown.arrow-down.prevent="focusElement($event.target.nextElementSibling)"
                    >
                        <span x-text="suggestion.title"></span>
                        <span x-text="suggestion.num_results"></span>
                    </div>
                </template>
            </div>
        </template>
        <button type="submit"
                title="<?= $escaper->escapeHtml(__('Search')) ?>"
                class="action search sr-only"
                aria-label="Search"
        >
            <?= $escaper->escapeHtml(__('Search')) ?>
        </button>
    </form>
</div>
